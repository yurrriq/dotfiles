The main entrypoint \hrefootnote{https://github.com/yurrriq/dotfiles/blob/main/flake.nix}{flake.nix} defines a \hrefootnote{https://nixos.wiki/wiki/Flakes}{Nix Flake}.  At the top-level, the flake defines \hyperref[sec:inputs]{\nix{inputs}} and \hyperref[sec:outputs]{\nix{outputs}}.

<<flake.nix>>=
{

  description = "My (semi-)literate, Nix-based dotfiles";

  inputs = {
    <<inputs>>
  };

  <<nixConfig>>

  outputs = { flake-parts, self, ... }@inputs:
    flake-parts.lib.mkFlake { inherit inputs; } {
      <<flake submodule imports>>
      flake = let inherit (inputs.nixpkgs) lib; in {
        lib = {
          <<outputs variables>>
        };
        <<system-agnostic outputs>>
      };
      systems = [
        "x86_64-linux"
      ];
      perSystem = { config, pkgs, self', system, ... }: {
        <<per-system outputs variables>>
        <<per-system outputs>>
        <<configure pre-commit hooks>>
        <<configure treefmt-nix>>
      };
    };
}
@

Automate the workflow for updating Nix dependencies via
\bash{nix flake update --commit-lock-file}.

<<nixConfig>>=
nixConfig = {
  commit-lockfile-summary = "build(deps): nix flake update";
};
@

\section{Inputs}
\label{sec:inputs}

\subsection{emacs-overlay}
\label{subsec:inputs-emacs-overlay}

The \hrefootnote{https://github.com/nix-community/emacs-overlay}{Emacs overlay}
\say{comes with extra functions to generate an Emacs closure from various types
  of dependency declaration.} Notably, \nix{emacsWithPackagesFromUsePackage},
which generates an Emacs closure from an Emacs config file, by way of
\hrefootnote{https://jwiegley.github.io/use-package/}{\elisp{use-package}}.  See
\hyperref[sec:emacs]{the Emacs section} on page~\pageref{sec:emacs} for usage.
Follow the top-level \nix{nixpkgs} and \nix{nixpkgs-stable} to dedupe
\nix{inputs}.

<<inputs>>=
emacs-overlay = {
  url = "github:nix-community/emacs-overlay";
  inputs = {
    nixpkgs.follows = "nixpkgs";
    nixpkgs-stable.follows = "nixpkgs-stable";
  };
};
@

\subsection{flake-parts}

\hrefootnote{https://flake.parts}{flake-parts} supports flake modules that can
be shared.

<<inputs>>=
flake-parts.url = "github:hercules-ci/flake-parts";
@

<<flake submodule imports>>=
imports = [
  <<git-hooks-nix flake module>>
  <<treefmt-nix flake module>>
  ./config/xmonad/flake-module.nix
];
@

\subsection{flake-utils}

\hrefootnote{https://github.com/numtide/flake-utils}{flake-utils} is a set of
pure Nix functions that are useful when writing flakes.  Pin a version to dedupe
\nix{inputs}.

<<inputs>>=
flake-utils.url = "github:numtide/flake-utils";
@ %def eachDefaultSystem

\subsection{pre-commit hooks}

<<inputs>>=
git-hooks-nix = {
  inputs = {
    nixpkgs.follows = "nixpkgs";
  };
  url = "github:cachix/git-hooks.nix";
};
@

<<git-hooks-nix flake module>>=
inputs.git-hooks-nix.flakeModule
@

<<configure pre-commit hooks>>=
pre-commit.settings.hooks = {
  biber-format = {
    description = "Use Biber to format .bib files";
    enable = true;
    entry =
      let
        biber-format = pkgs.writeShellApplication {
          name = "biber-format";
          runtimeInputs = with pkgs; [
            biber
            moreutils
          ];
          text = ''
            biber \
              --nolog \
              --output-align \
              --output-fieldcase=lower \
              --output-file /dev/stdout \
              --output-resolve \
              --output-safechars \
              --quiet --quiet \
              --tool \
              "$1" |
              head -n-1 |
              sponge "$1"
          '';
        };
      in
      "${biber-format}/bin/biber-format";
    files = "\\.bib$";
    language = "system";
    name = "Format .bib files";
  };
  editorconfig-checker.enable = true;
  make-srcs = {
    description = "Ensure Noweb sources are up to date";
    enable = true;
    entry =
      let
        make-srcs = pkgs.writeShellApplication {
          name = "make-srcs";
          runtimeInputs = with pkgs; [
            gnumake
            noweb
          ];
          text = "make srcs";
        };
      in
      "${make-srcs}/bin/make-srcs";
    always_run = true;
    language = "system";
    name = "make srcs";
  };
  treefmt.enable = true;
};
@

\subsection{home-manager}

\hrefootnote{https://github.com/nix-community/home-manager}{home-manager} is an
invaluable tool for managing a deterministic \bash{$HOME}.  Pin a version and follow the top-level \nix{nixpkgs} and \nix{flake-utils} to dedupe \nix{inputs}.

<<inputs>>=
home-manager = {
  url = "github:nix-community/home-manager/release-24.11";
  inputs.nixpkgs.follows = "nixpkgs";
};
@

\subsection{nixGL}

\hrefootnote{https://github.com/guibou/nixGL}{nixGL} is a wrapper tool that solves \hrefootnote{https://github.com/NixOS/nixpkgs/issues/9415}{the OpenGL problem with Nix.}  Pin a version and follow the top-level \nix{flake-utils} and \nix{nixpkgs} to dedupe \nix{inputs}. See [[nixGLWrap]] for usage.

<<inputs>>=
nixgl = {
  url = "github:guibou/nixGL";
  inputs.flake-utils.follows = "flake-utils";
  inputs.nixpkgs.follows = "nixpkgs";
};
@

\subsection{nixos-hardware}

\hrefootnote{https://github.com/NixOS/nixos-hardware}{nixos-hardware} is
\say{a collection of NixOS modules covering hardware quirks.}

<<inputs>>=
nixos-hardware.url = "github:nixos/nixos-hardware";
@

\subsection{nixpkgs}

Someday soon again, prefer to live on the edge and pin \nix{nixpkgs} to the
\textit{nixpkgs-unstable} branch.

<<inputs>>=
nixpkgs.url = "github:nixos/nixpkgs/release-24.11";
@

Additionally, pin a stable version of the
\hrefootnote{https://github.com/NixOS/nixpkgs}{Nix Packages collection}.

<<inputs>>=
nixpkgs-stable.url = "github:nixos/nixpkgs/release-24.11";
@

\subsection{NUR}

The \hrefootnote{https://github.com/nix-community/NUR}{Nix User Repository}
provides \say{user contributed Nix packages.} Notably, I use some of
\href{https://rycee.net}{Robert Helgesson}'s
\hrefootnote{https://gitlab.com/rycee/nur-expressions/-/blob/master/pkgs/firefox-addons/default.nix}{Firefox
  add-ons} (see \hyperref[sec:firefox]{Firefox} on page~\pageref{sec:firefox}).

<<inputs>>=
nur = {
  inputs.flake-parts.follows = "flake-parts";
  inputs.nixpkgs.follows = "nixpkgs";
  inputs.treefmt-nix.follows = "treefmt-nix";
  url = "github:nix-community/nur";
};
@

\subsection{treefmt}

Use \hrefootnote{https://github.com/numtide/treefmt}{treefmt} (via
\hrefootnote{https://github.com/numtide/treefmt-nix}{treefmt-nix}) to format
code, as a pre-commit hook or by calling \bash{nix fmt} directly.

<<inputs>>=
treefmt-nix = {
  inputs.nixpkgs.follows = "nixpkgs";
  url = "github:numtide/treefmt-nix";
};
@

<<treefmt-nix flake module>>=
inputs.treefmt-nix.flakeModule
@

<<configure treefmt-nix>>=
treefmt = {
  programs = rec {
    <<deadnix>>
    <<nixpkgs-fmt>>
    <<shellcheck>>
    <<shfmt>>
  };
  settings.formatter = {
    <<shellcheck settings>>
  };
};
@

Use \hrefootnote{https://github.com/astro/deadnix}{deadnix} to scan Nix files
for dead code (unused variable bindings).

<<deadnix>>=
deadnix.enable = true;
@

Use the same \nix{excludes} from the [[<<nixpkgs-fmt settings>>]], to exclude
some generated Nix files.

<<deadnix>>=
deadnix.excludes = nixpkgs-fmt.excludes;
@

<<deadnix>>=
deadnix.no-lambda-arg = true;
@

Use \hrefootnote{https://github.com/nix-community/nixpkgs-fmt}{nixpkgs-fmt} to
format Nix files.

<<nixpkgs-fmt>>=
nixpkgs-fmt.enable = true;
@

<<nixpkgs-fmt>>=
nixpkgs-fmt.excludes = [
  "machines/*/hardware-configuration.nix"
  "pkgs/development/node-packages/node-env.nix"
  "pkgs/development/node-packages/node-packages.nix"
];
@

Use \hrefootnote{https://www.shellcheck.net/}{ShellCheck} to lint shell scripts.

<<shellcheck>>=
shellcheck.enable = true;
@

<<shellcheck>>=
shellcheck.includes = [
  "*.sh"
  ".envrc"
];
@

<<shellcheck settings>>=
shellcheck.options = [
  "--format=tty"
  "--shell=bash"
];
@

Use \hrefootnote{https://github.com/mvdan/sh}{shfmt} to format shell scripts.

<<shfmt>>=
shfmt = {
  enable = true;
  indent_size = 4;
};
@

\section{Outputs}
\label{sec:outputs}

\subsection{Overlays}

Use \nix{composeManyExtensions}\footnote{
  \say{%
    Compose several extending functions of the type expected by \nix{extends} into
    one where changes made in preceding functions are made available to subsequent
    ones.%
  } --- \href{https://github.com/NixOS/nixpkgs/commit/c3b35f21}{NixOS/nixpkgs@c3b35f21}%
} to compose all the other [[<<overlays>>]] into one, \nix{overlays.default}.

<<system-agnostic outputs>>=
overlays = {
  default =
    lib.composeManyExtensions
      (lib.attrValues
        (lib.filterAttrs (name: _: name != "default") self.overlays));
  <<overlays>>
};
@

\subsection{Per-system pkgs}

For each \nix{system}, define a package collection that composes the overlays
from \nix{deadnix} and \nix{emacs-overlay}, as well as the locally-defined
\nix{home-manager}, \nix{iosevka-custom}, and \nix{noweb} overlays.

<<per-system outputs variables>>=
_module.args.pkgs = import inputs.nixpkgs {
  overlays = [
    inputs.emacs-overlay.overlay
    self.overlays.home-manager
    self.overlays.iosevka-custom
    self.overlays.noweb
  ];
  inherit system;
};
@

\subsection{Development environments}

Define some development environments.  One of the main benefits is the super
fast \hrefootnote{https://direnv.net}{direnv} integration.

<<per-system outputs>>=
devShells = {
  <<devShells>>
};
@

Define the default \nix{devShell}, including tools to build
\hrefootnote{https://yurrriq.codes/dotfiles/dotfiles.pdf}{the PDF,}
\hrefootnote{https://github.com/mozilla/sops}{manage secrets},
\hrefootnote{https://linux.die.net/man/1/mkpasswd}{generate passwords},
\hrefootnote{https://github.com/fsaintjacques/semver-tool}{bump the version},
\hrefootnote{https://pre-commit.com}{pre-commit}), and
\hrefootnote{https://www.gnu.org/software/stow/}{manage the non-Nix symlink
  farm}.

<<devShells>>=
default = pkgs.mkShell {
  inherit (self.packages.${system}.default) FONTCONFIG_FILE;
  inputsFrom = [
    config.pre-commit.devShell
    self'.packages.default
  ];
  nativeBuildInputs = with pkgs; [
    biber
    (
      emacsWithPackagesFromUsePackage {
        alwaysEnsure = true;
        config = ./config/emacs/init.el;
      }
    )
    git
    git-lfs
    gnumake
    gnupg
    home-manager
    mkpasswd
    nodePackages.node2nix
    semver-tool
    sops
    stow
  ];
};
@

\subsection{Packages}

The default package builds
\hrefootnote{https://yurrriq.codes/dotfiles/dotfiles.pdf}{the PDF}.  See also: \hyperref[chap:packages]{Packages}.

<<per-system outputs>>=
packages = {
  default = self.packages.${system}.yurrriq-dotfiles;
  inherit (pkgs) iosevka-custom;
  yurrriq-dotfiles = pkgs.callPackage ./. { };
};
@

\subsection{Modules}

See \hyperref[subsec:modules]{Modules}.

<<system-agnostic outputs>>=
nixosModules = {
  <<Modules>>
};
@

\subsection{NixOS configurations}

Define system configurations for \hyperref[sec:nixps]{my personal laptop} and
\hyperref[sec:sruxps]{my work laptop}.

<<system-agnostic outputs>>=
nixosConfigurations = {
  "nixps" = self.lib.mkSystem "nixps" "dell-xps-15-9560-intel";
  "MSP-EBAILEY01" = self.lib.mkSystem "sruxps" "dell-xps-13-7390";
};
@

\subsection{home-manager modules}

<<system-agnostic outputs>>=
homeManagerModules =
  let
    inherit (builtins) attrNames baseNameOf filter listToAttrs pathExists readDir toPath;
    inherit (lib.attrsets) nameValuePair;
    inherit (lib.strings) hasSuffix removeSuffix;
    resolveModule = relativePath:
      nameValuePair
        (removeSuffix ".nix" (baseNameOf relativePath))
        (import (toPath (./config + ("/" + relativePath))));
    isModule = path:
      hasSuffix ".nix" path ||
      pathExists (./config + ("/" + path + "/default.nix"));
  in
  listToAttrs
    (map resolveModule
      (filter isModule
        (attrNames (readDir ./config))));
@

\subsection{home-manager configurations}

\todoo{Describe this}

<<system-agnostic outputs>>=
homeConfigurations.eric = inputs.home-manager.lib.homeManagerConfiguration {
  modules = self.nixosModules.home-manager.home-manager.sharedModules ++ [
    self.nixosModules.nixRegistry
    ./machines/sruxps/home.nix
    {
      home = {
        username = "eric";
        homeDirectory = "/home/eric";
        stateVersion = "24.11";
      };
    }
  ];
  pkgs = import inputs.nixpkgs {
    inherit (self.nixosModules.nixpkgs.nixpkgs) config;
    overlays = self.nixosModules.nixpkgs.nixpkgs.overlays ++ [
      # https://github.com/nix-community/home-manager/issues/2251#issuecomment-895338427
      (final: prev: {
        kitty = prev.lib.nixGLWrap { pkg = prev.kitty; };
        # FIXME
        # zoom-us = prev.lib.nixGLWrap { pkg = prev.zoom-us; binName = "zoom"; };
      })
    ];
    system = "x86_64-linux";
  };
};
@

\subsection{Variables}

Define a helper function \hs{mkSystem :: String -> String -> AttrSet} for
creating system configurations.  Given a (NixOS system) \nix{name} and a
\nix{machine} name, which corresponds to directories in
\hrefootnote{https://github.com/yurrriq/dotfiles/tree/main/machines}{machines/}
containing \texttt{configuration.nix} and \texttt{hardware-configuration.nix}.

<<outputs variables>>=
mkSystem = name: machine: lib.nixosSystem {
  modules = [
    (./machines + "/${name}/hardware-configuration.nix")
    inputs.nixos-hardware.nixosModules.${machine}
    inputs.nixos-hardware.nixosModules.common-pc-laptop-ssd
    inputs.home-manager.nixosModules.home-manager
    self.nixosModules.home-manager
    self.nixosModules.location
    self.nixosModules.nix
    self.nixosModules.nixPath
    self.nixosModules.nixRegistry
    self.nixosModules.nixos
    self.nixosModules.nixpkgs
    self.nixosModules.bootyjams
    self.nixosModules.virtualisation
    (./machines + "/${name}/configuration.nix")
  ];
  system = "x86_64-linux";
};
@

\nix{pkgNameElem} takes a list of package names and returns a function suitable
for an
\hrefootnote{https://nixos.org/manual/nixpkgs/unstable/\#sec-allow-unfree}{\nix{allowUnfreePredicate}}.

\begin{minted}{haskell}
  mkSystem :: [String] -> (String -> Bool)
\end{minted}

<<outputs variables>>=
pkgNameElem = names: pkg:
  builtins.elem (lib.getName pkg) names;
@

\subsection{Overlays}

Define a custom build of \hrefootnote{}{Iosevka}.

<<overlays>>=
iosevka-custom = final: prev: {
  # https://typeof.net/Iosevka/customizer
  iosevka-custom = prev.iosevka.override {
    privateBuildPlan = ''
      [buildPlans.Iosevkacustom]
      family = "Iosevka Custom"
      spacing = "normal"
      serifs = "sans"
      exportGlyphNames = true
      [buildPlans.Iosevkacustom.weights.Regular]
      shape = 400
      menu = 400
      css = 400
      [buildPlans.Iosevkacustom.weights.Bold]
      shape = 700
      menu = 700
      css = 700
      [buildPlans.Iosevkacustom.slopes.Upright]
      angle = 0
      shape = "upright"
      menu = "upright"
      css = "normal"
      [buildPlans.Iosevkacustom.slopes.Italic]
      angle = 9.4
      shape = "italic"
      menu = "italic"
      css = "italic"
      [buildPlans.Iosevkacustom.ligations]
      inherits = "dlig"
      [buildPlans.Iosevkacustom.variants.design]
      lower-lambda = "curly-tailed-turn"
    '';
    set = "custom";
  };
};
@

Define an overlay with a pinned version of home-manager.

<<overlays>>=
home-manager = final: prev: {
  home-manager = inputs.home-manager.packages.${prev.system}.home-manager;
};
@

OpenGL is a kind of a nightmare on non-NixOS, and nixGL makes it Just
Work\texttrademark. Define a convenience function
\hs{nixGLWrap :: AttrSet -> Derivation} to wrap the wrapper.
Since most of my machines have Intel video cards and I haven't adopted Nvidia
drivers, use \nix{nixGLIntel}.

<<overlays>>=
nixGLWrap = final: prev: {
  lib = prev.lib // {
    nixGLWrap = { pkg, binName ? prev.lib.getName pkg }:
      prev.writeShellScriptBin binName ''
        exec ${final.nixgl.nixGLIntel}/bin/nixGLIntel ${pkg}/bin/${binName} "$@"
      '';
  };
};
@ %def nixGLWrap

Define an overlay that adds \hyperref[sec:node-packages]{my custom
  \nix{nodePackages}}.

\begin{minted}{nix}
  nodePackages = final: prev: {
    nodePackages =
      unstable-pkgs.nodePackages // prev.callPackage ./pkgs/development/node-packages {
        inherit (prev) pkgs nodejs;
      };
  };
\end{minted}

Define an overlay that overrides
\hrefootnote{https://www.cs.tufts.edu/~nr/noweb/}{noweb} to build with a
non-graphical version of \hrefootnote{https://www2.cs.arizona.edu/icon/}{Icon}.

<<overlays>>=
noweb = final: prev: {
  noweb = prev.noweb.override {
    icon-lang = prev.icon-lang.override {
      withGraphics = false;
    };
  };
};
@

\subsection{NixOS Modules}
\label{subsec:modules}

\todoo{Document (or better yet: refactor) the other \nix{nixosModules}}

<<Modules>>=
bootyjams = import ./modules/bootyjams.nix;
@

<<Modules>>=
home-manager = {
  home-manager = {
    sharedModules =
      let
        excluded = [
          "bugwarrior"
          "nix"
          "screen-locker"
          "taskwarrior"
        ];
        notExcluded = lib.filterAttrs (name: _: !(builtins.elem name excluded));
      in
      builtins.attrValues (notExcluded self.homeManagerModules);
    useGlobalPkgs = true;
    useUserPackages = true;
    verbose = true;
  };
};
@

<<Modules>>=
location = import ./modules/location.nix;
nix = import ./modules/nix.nix;
@

\todoo{Document this \nix{nixPath} hack}

<<Modules>>=
nixPath = {
  nix.nixPath = lib.mapAttrsToList (n: v: "${n}=${v}")
    (lib.filterAttrs (n: _: n != "self") inputs) ++ [
    "nixos-config=/etc/nixos/configuration.nix"
  ];
};
@

\todoo{Document \nix{nixRegistry}}

<<Modules>>=
nixRegistry = {
  nix.registry = lib.mapAttrs (_: flake: { inherit flake; }) inputs;
};
@

<<Modules>>=
nixos = import ./modules/nixos.nix;
@

\todoo{Document \nix{nixpkgs} config}

<<Modules>>=
nixpkgs = {
  nixpkgs.config.allowUnfreePredicate = self.lib.pkgNameElem [
    "Oracle_VirtualBox_Extension_Pack"
    "lastpass-password-manager"
    "lens"
    "nvidia"
    "reaper"
    "slack"
    "spotify"
    "spotify-unwrapped"
    "steam"
    # "steam-original"
    # "steam-run"
    "steam-unwrapped"
    "vault"
    "zoom"
  ];
  nixpkgs.overlays = [
    self.overlays.default
    inputs.emacs-overlay.overlay
    inputs.nixgl.overlay
    inputs.nur.overlays.default
  ];
};
@

See \hyperref[sec:virtualisation]{Virtualisation}.

<<Modules>>=
virtualisation = import ./modules/virtualisation.nix;
@


%% Local Variables:
%% noweb-code-mode: nix-mode
%% End:
