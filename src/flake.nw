The main entrypoint is
\href{https://github.com/yurrriq/dotfiles/blob/main/flake.nix}{flake.nix},
which defines a \hrefootnote{https://nixos.wiki/wiki/Flakes}{Nix Flake}.

At the top-level, the flake defines \hyperref[sec:inputs]{\nix{inputs}} and
\hyperref[sec:outputs]{\nix{outputs}}.

<<flake.nix>>=
{

  description = "My (semi-)literate, Nix-based dotfiles";

  inputs = {
    <<inputs>>
  };

  outputs = { self, ... }@inputs:
    let
      inherit (inputs.nixpkgs) lib;
      <<outputs variables>>
    in
    {
      <<outputs>>
    };

}
@

\section{Inputs}
\label{sec:inputs}

\subsection{emacs-overlay}

The \hrefootnote{https://github.com/nix-community/emacs-overlay}{Emacs overlay}
\say{comes with extra functions to generate an Emacs closure from various types
  of dependency declaration.} Notably, \nix{emacsWithPackagesFromUsePackage},
which generates an Emacs closure from an Emacs config file, by way of
\hrefootnote{https://jwiegley.github.io/use-package/}{\elisp{use-package}}.  See
\hyperref[sec:emacs]{the Emacs section} on page~\pageref{sec:emacs} for usage.

<<inputs>>=
emacs-overlay = {
  url = "github:nix-community/emacs-overlay";
  inputs.nixpkgs.follows = "nixpkgs";
};
@

\subsection{home-manager}

\hrefootnote{https://github.com/nix-community/home-manager}{home-manager} is an
invaluable tool for managing a deterministic \bash{$HOME}.

<<inputs>>=
home-manager = {
  url = "github:nix-community/home-manager/release-21.11";
  inputs.nixpkgs.follows = "nixpkgs";
};
@

\subsection{naal}

\href{https://github.com/yurrriq/naal}{naal} is a literate
\hrefootnote{https://core.tcl-lang.org/expect/index}{Expect} script I wrote,
for non-interactive
\href{https://github.com/sportradar/aws-azure-login}{AWS Azure Login}.

<<inputs>>=
naal = {
  url = "github:yurrriq/naal";
  inputs.nixpkgs.follows = "nixpkgs-unstable";
};
@

\subsection{nixos-hardware}

\hrefootnote{https://github.com/NixOS/nixos-hardware}{nixos-hardware} is
\say{a collection of NixOS modules covering hardware quirks.}

<<inputs>>=
nixos-hardware.url = "github:nixos/nixos-hardware";
@

\subsection{nixpkgs}

Of course, pin a stable version of the
\hrefootnote{https://github.com/NixOS/nixpkgs}{Nix Packages collection}.

Additionally, pin an unstable version of the collection.

<<inputs>>=
nixpkgs.url = "github:nixos/nixpkgs/release-21.11";
nixpkgs-unstable.url = "github:nixos/nixpkgs";
@

\subsection{NUR}

The \hrefootnote{https://github.com/nix-community/NUR}{Nix User Repository}
provides \say{user contributed Nix packages.} Notably, I use some of
\href{https://rycee.net}{Robert Helgesson}'s
\hrefootnote{https://gitlab.com/rycee/nur-expressions/-/blob/master/pkgs/firefox-addons/default.nix}{Firefox
  add-ons} (see \hyperref[sec:firefox]{Firefox} on page~\pageref{sec:firefox}).

<<inputs>>=
nur.url = "github:nix-community/nur";
@

\section{Outputs}
\label{sec:outputs}

\subsection{Overlays}

Use \nix{composeManyExtensions} to compose all the [[<<overlays>>]] into one.

\marginnote{%
  \say{%
    Compose several extending functions of the type expected by \nix{extends} into
    one where changes made in preceding functions are made available to subsequent
    ones.%
  } --- \href{https://github.com/NixOS/nixpkgs/commit/c3b35f21}{NixOS/nixpkgs@c3b35f21}%
}

<<outputs>>=
overlay = lib.composeManyExtensions (lib.attrValues self.overlays);

overlays = {
  <<overlays>>
};
@

\subsection{Development environments}

\todoo{Document \nix{devShell}}

<<outputs>>=
devShell.x86_64-linux = pkgs.mkShell {
  inherit (self.defaultPackage.x86_64-linux) FONTCONFIG_FILE;
  buildInputs = with pkgs; [
    biber
    git
    gitAndTools.pre-commit
    gnumake
    gnupg
    mkpasswd
    nixpkgs-fmt
    nodePackages.node2nix
    python3Packages.pygments
    # FIXME: python2Packages.pywatchman
    semver-tool
    shellcheck
    shfmt
    sops
    stow
  ] ++ self.defaultPackage.x86_64-linux.nativeBuildInputs;
};
@

Configure a development environment for my XMonad config.

<<outputs>>=
devShells.x86_64-linux = {
  xmonad =
    let
      _pkgs = import inputs.nixpkgs-unstable {
        overlays = [
          inputs.emacs-overlay.overlay
        ];
        system = "x86_64-linux";
      };
      myXMonad =
        _pkgs.haskellPackages.callCabal2nix "my-xmonad" ./config/xmonad { };
    in
    _pkgs.mkShell {
      buildInputs = with _pkgs; [
        cabal-install
        ghcid
        gitAndTools.pre-commit
        haskell-language-server
        haskellPackages.ormolu
        haskellPackages.pointfree
        (
          emacsWithPackagesFromUsePackage {
            alwaysEnsure = true;
            config = ./config/xmonad/emacs.el;
          }
        )
      ] ++ myXMonad.env.nativeBuildInputs;
    };
};
@

\subsection{Packages}

See \hyperref[chap:packages]{Packages}.

<<outputs>>=
packages.x86_64-linux = {
  fish-kubectl-completions = pkgs.callPackage ./pkgs/shells/fish/kubectl-completions { };
  yurrriq-dotfiles = pkgs.callPackage ./. { };
};

defaultPackage.x86_64-linux = self.packages.x86_64-linux.yurrriq-dotfiles;
@

\subsection{Modules}

\todoo{Document \nix{nixosModules}}

<<outputs>>=
nixosModules = {
  <<Modules>>
};
@

\subsection{NixOS configurations}

Define system configurations for \hyperref[sec:nixps]{my personal laptop} and
\hyperref[sec:sruxps]{my work laptop}.

<<outputs>>=
nixosConfigurations = {
  "nixps" = mkSystem "nixps" "dell-xps-15-9560-intel";
  "MSP-EBAILEY01" = mkSystem "sruxps" "dell-xps-13-7390";
};
@

\subsection{Variables}

Define a helper function, [[mkSystem]], for creating system configurations.
\todoo{Document \nix{mkSystem}}

\begin{minted}{haskell}
  mkSystem :: String -> String -> AttrSet
\end{minted}

<<outputs variables>>=
mkSystem = name: machine: lib.nixosSystem {
  modules = [
    (./machines + "/${name}/hardware-configuration.nix")
    inputs.nixos-hardware.nixosModules.${machine}
    inputs.nixos-hardware.nixosModules.common-pc-laptop-ssd
    inputs.home-manager.nixosModules.home-manager
    {
      home-manager = {
        useGlobalPkgs = true;
        useUserPackages = true;
        verbose = true;
      };
    }
    self.nixosModules.common
    self.nixosModules.location
    self.nixosModules.nix
    self.nixosModules.nixPath
    self.nixosModules.nixRegistry
    self.nixosModules.nixos
    self.nixosModules.nixpkgs
    self.nixosModules.bootyjams
    self.nixosModules.clis
    self.nixosModules.applications
    self.nixosModules.virtualisation
    (./machines + "/${name}/configuration.nix")
  ];
  system = "x86_64-linux";
};
@

\todoo{Document \nix{pkgNameElem}}

<<outputs variables>>=
pkgNameElem = names: pkg:
  builtins.elem
    (builtins.parseDrvName
      (if builtins.hasAttr "pname" pkg then pkg.pname
      else if builtins.hasAttr "name" pkg then pkg.name
      else "")).name
    names;
@

\todoo{Document \nix{pkgs}}

<<outputs variables>>=
pkgs = import inputs.nixpkgs {
  overlays = [
    self.overlays.noweb
    self.overlays.unstable
  ];
  system = "x86_64-linux";
};
@

\todoo{Document \nix{unstable-pkgs}}

<<outputs variables>>=
unstable-pkgs = import inputs.nixpkgs-unstable {
  config.allowUnfreePredicate = pkgNameElem [
    "zoom"
  ];
  system = "x86_64-linux";
};
@ % def unstable-pkgs

\subsection{Overlays}

Define an overlay that adds [[fish-kubectl-completions]].\todor{Fix this noweb xref}

<<overlays>>=
fish-completions = final: prev: {
  fish-kubectl-completions = prev.callPackage ./pkgs/shells/fish/kubectl-completions { };
};
@

Define an overlay that adds \hyperref[sec:node-packages]{my custom
  \nix{nodePackages}}.

\begin{minted}{nix}
  nodePackages = final: prev: {
    nodePackages =
      unstable-pkgs.nodePackages // prev.callPackage ./pkgs/development/node-packages {
        inherit (prev) pkgs nodejs;
      };
  };
\end{minted}

Define an overlay that overrides
\hrefootnote{https://www.cs.tufts.edu/~nr/noweb/}{noweb} to build with a
non-graphical version of \hrefootnote{https://www2.cs.arizona.edu/icon/}{Icon}.

<<overlays>>=
noweb = final: prev: {
  noweb = unstable-pkgs.noweb.override {
    icon-lang = unstable-pkgs.icon-lang.override {
      withGraphics = false;
    };
  };
};
@

Define an overlay to overrides several packages with their counterparts from
[[unstable-pkgs]].

\todoo{Highlight especially interesting packages in \nix{overlays.unstable}}

<<overlays>>=
unstable = final: prev: {
  inherit (unstable-pkgs)
    autojump
    browserpass
    conftest
    delta
    eksctl
    electron
    haskellPackages
    kubectx
    kubelogin
    nix-direnv
    pass
    renderizer
    ripgrep
    scc
    signal-desktop
    sops
    starship
    super-productivity
    tomb
    yq
    zoom-us
    zoxide
    ;
  inherit (unstable-pkgs.python3Packages)
    bugwarrior
    ec2instanceconnectcli
    ;
};
@

\subsection{NixOS Modules}

\todoo{Document (or better yet: refactor) the other \nix{nixosModules}}

<<Modules>>=
applications = import ./modules/applications.nix;

bootyjams = import ./modules/bootyjams.nix;

clis = import ./modules/clis.nix;

common = import ./modules/common.nix;

location = import ./modules/location.nix;

nix = import ./modules/nix.nix;
@

\todoo{Document this \nix{nixPath} hack}

<<Modules>>=
nixPath = {
  nix.nixPath = lib.mapAttrsToList (n: v: "${n}=${v}")
    (lib.filterAttrs (n: _: n != "self") inputs) ++ [
    "nixos-config=/etc/nixos/configuration.nix"
  ];
};
@

\todoo{Document \nix{nixRegistry}}

<<Modules>>=
nixRegistry = {
  nix.registry = {
    home-manager.flake = inputs.home-manager;
    nixpkgs.flake = inputs.nixpkgs;
    nixpkgs-unstable.flake = inputs.nixpkgs-unstable;
    nur.flake = inputs.nur;
  };
};
@

<<Modules>>=
nixos = import ./modules/nixos.nix;
@

\todoo{Document \nix{nixpkgs} config}

<<Modules>>=
nixpkgs = {
  nixpkgs.config.allowUnfreePredicate = pkgNameElem [
    "lastpass-password-manager"
    "reaper"
    "slack"
    "spotify"
    "spotify-unwrapped"
    "steam"
    "steam-original"
    "steam-runtime"
  ];
  nixpkgs.overlays = [
    self.overlay
    inputs.emacs-overlay.overlay
    inputs.naal.overlays.naal
    inputs.nur.overlay
  ];
};
@

See \hyperref[sec:virtualisation]{Virtualisation}.

<<Modules>>=
virtualisation = import ./modules/virtualisation.nix;
@


%% Local Variables:
%% noweb-code-mode: nix-mode
%% End:
