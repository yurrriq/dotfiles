The main entrypoint is \hrefootnote{https://github.com/yurrriq/dotfiles/blob/main/flake.nix}{flake.nix}.

<<flake.nix>>=
{

  description = "My (semi-)literate, Nix-based dotfiles";

  inputs = {
    <<inputs>>
  };

  outputs = { self, ... }@inputs:
    let
      inherit (inputs.nixpkgs) lib;
      <<outputs variables>>
    in
    {
      <<outputs>>
    };

}
@

\section{Inputs}

Someday, I'd like to \hrefootnote{https://github.com/yurrriq/dotfiles/issues/15}{adopt the \nix{emacs-overlay} flake}.

\begin{minted}{nix}
  emacs-overlay = {
    url = "github:nix-community/emacs-overlay";
    inputs.nixpkgs.follows = "nixpkgs";
  };
\end{minted}

\hrefootnote{https://github.com/nix-community/home-manager}{home-manager} is an
invaluable tool for managing deterministic \bash{$HOME}.

<<inputs>>=
home-manager = {
  url = "github:nix-community/home-manager/release-20.09";
  inputs.nixpkgs.follows = "nixpkgs";
};
@

\todoo{yurrriq/naal: nix flake init}
\begin{minted}{nix}
  naal.url = "github:yurrriq/naal";
\end{minted}

<<inputs>>=
nixos-hardware.url = "github:nixos/nixos-hardware";
@

<<inputs>>=
nixpkgs.url = "github:nixos/nixpkgs/release-20.09";
nixpkgs-unstable.url = "github:nixos/nixpkgs";
@

<<inputs>>=
nur.url = "github:nix-community/nur";
@

\section{Outputs}

\begin{minted}{nix}
  overlay = final: prev: {};
\end{minted}

<<outputs>>=
overlays = {
  <<outputs.overlays>>
};

devShell.x86_64-linux = pkgs.callPackage ./shell.nix {
  inherit pkgs;
  yurrriq-dotfiles = self.defaultPackage.x86_64-linux;
};

packages.x86_64-linux = {
  fish-kubectl-completions = pkgs.callPackage ./pkgs/shells/fish/kubectl-completions { };
  yurrriq-dotfiles = pkgs.callPackage ./default.nix { inherit pkgs; };
};

defaultPackage.x86_64-linux = self.packages.x86_64-linux.yurrriq-dotfiles;

nixosModules = {
  <<outputs.nixosModules>>
};

nixosConfigurations = {
  "nixps" = mkSystem "nixps" "dell-xps-15-9560-intel";
  "MSP-EBAILEY01" = mkSystem "sruxps" "dell-xps-13-7390";
};
@

\subsection{Variables}

\begin{minted}{haskell}
  mkSystem :: String -> String -> AttrSet
\end{minted}

<<outputs variables>>=
mkSystem = name: machine: lib.nixosSystem {
  modules = [
    (./machines + "/${name}/hardware-configuration.nix")
    inputs.nixos-hardware.nixosModules.${machine}
    inputs.nixos-hardware.nixosModules.common-pc-laptop-ssd
    inputs.home-manager.nixosModules.home-manager
    {
      home-manager = {
        useGlobalPkgs = true;
        useUserPackages = true;
        verbose = true;
      };
    }
    self.nixosModules.common
    self.nixosModules.location
    self.nixosModules.nix
    self.nixosModules.nixPath
    self.nixosModules.nixRegistry
    self.nixosModules.nixos
    self.nixosModules.nixpkgs
    self.nixosModules.bootyjams
    self.nixosModules.clis
    self.nixosModules.applications
    self.nixosModules.virtualisation
    (./machines + "/${name}/configuration.nix")
  ];
  system = "x86_64-linux";
};
@

<<outputs variables>>=
pkgNameElem = names: pkg:
  builtins.elem
    (builtins.parseDrvName
      (if builtins.hasAttr "pname" pkg then pkg.pname
      else if builtins.hasAttr "name" pkg then pkg.name
      else "")).name
    names;
@

<<outputs variables>>=
pkgs = import inputs.nixpkgs {
  overlays = [
    self.overlays.noweb
    self.overlays.unstable
  ];
  system = "x86_64-linux";
};
@

<<outputs variables>>=
unstable-pkgs = import inputs.nixpkgs-unstable {
  config.allowUnfreePredicate = pkgNameElem [
    "zoom"
  ];
  system = "x86_64-linux";
};
@

\subsection{Overlays}

<<outputs.overlays>>=
fish-completions = final: prev: {
  fish-kubectl-completions = prev.callPackage ./pkgs/shells/fish/kubectl-completions { };
};
@

<<outputs.overlays>>=
nodePackages = final: prev: {
  nodePackages =
    unstable-pkgs.nodePackages // prev.callPackage ./pkgs/development/node-packages {
      inherit (prev) pkgs nodejs;
    };
};
@

<<outputs.overlays>>=
noweb = final: prev: {
  noweb = unstable-pkgs.noweb.override {
    icon-lang = unstable-pkgs.icon-lang.override {
      withGraphics = false;
    };
  };
};
@

<<outputs.overlays>>=
unstable = final: prev: {
  inherit (unstable-pkgs)
    autojump
    browserpass
    conftest
    delta
    eksctl
    kubectx
    kubelogin
    pass
    renderizer
    ripgrep
    scc
    signal-desktop
    sops
    starship
    super-productivity
    tomb
    yq
    zoom-us
    ;
  inherit (unstable-pkgs.python3Packages)
    bugwarrior
    ec2instanceconnectcli
    ;
};
@

\subsection{NixOS Modules}

<<outputs.nixosModules>>=
applications = import ./modules/applications.nix;

bootyjams = import ./modules/bootyjams.nix;

clis = import ./modules/clis.nix;

common = import ./modules/common.nix;

location = import ./modules/location.nix;

nix = import ./modules/nix.nix;

nixPath = {
  nix.nixPath = lib.mapAttrsToList (n: v: "${n}=${v}")
    (lib.filterAttrs (n: _: n != "self") inputs);
};

nixRegistry = {
  nix.registry = {
    home-manager.flake = inputs.home-manager;
    nixpkgs.flake = inputs.nixpkgs;
    nixpkgs-unstable.flake = inputs.nixpkgs-unstable;
    nur.flake = inputs.nur;
  };
};

nixos = import ./modules/nixos.nix;

nixpkgs = {
  nixpkgs.config.allowUnfreePredicate = pkgNameElem [
    "lastpass-password-manager"
    "reaper"
    "slack"
    "spotify"
    "steam"
    "steam-original"
    "steam-runtime"
  ];
  nixpkgs.overlays = lib.attrValues self.overlays ++ [
    inputs.nur.overlay
  ];
};

virtualisation = import ./modules/virtualisation.nix;
@


%% Local Variables:
%% noweb-code-mode: nix-mode
%% End:
