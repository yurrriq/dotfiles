\subsection{on-exit Git hook}\label{subsec:on-exit-git-hook}

\newthought{First}, use a fairly portable Bash shebang, and be safe.\footnote{%
  \bash{-e}xit immediately upon failure, treat \bash{-u}nset variables as an
  error, disable \bash{-f}ile globbing, and fail if any part of a pipeline fails
  (\bash{-o pipefail}).%
}

<<config/taskwarrior/on-exit-git.sh>>=
#! /usr/bin/env bash

set -eufo pipefail
@


Run in debug mode\footnote{i.e. echo commands},
if the environment variable \bash{DEBUG} is nonempty.

<<config/taskwarrior/on-exit-git.sh>>=
if [ -n "${DEBUG:-}" ]; then
    set -x
fi
@


\newthought{Parse} the command line arguments.

Don't include the [[api]] version, [[rc]] file, or Taskwarrior [[version]].
\marginnote{%
  N.B. The positional arguments are formatted as \bash{foo:bar}, where
  \bash{foo} is the name of the argument, and \bash{bar} is the value.%
}

\begin{minted}[gobble=2]{bash}
  api="${1#api:}"
  rc="${4#rc:}"
  version="${6#version:}"
\end{minted}


Parse and store the values of the arguments, [[args]], [[command]], and [[data]]
directory.

<<config/taskwarrior/on-exit-git.sh>>=
args="${2#args:}"
command="${3#command:}"
data="${5#data:}"

@


\newthought{Throughout this script}, run \bash{git} as if it were started in
the Taskwarrior [[data]] directory, i.e. \bash{git -C "$data"}.

\marginnote{%
  If there are no changes, \bash{exit} successfully,
  printing an informative message if running in debug mode.%
}

\marginnote{%
  \bash{git diff} \bash{exit}s with status code \bash{0} if
  there are no differences between the working tree and the index.%
}

<<config/taskwarrior/on-exit-git.sh>>=
if git -C "$data" diff --quiet; then
    if [ -n "${DEBUG:-}" ]; then
        echo 'No changes to commit'
    fi
    exit 0
@


If present, stage the changes or die trying.

<<config/taskwarrior/on-exit-git.sh>>=
elif ! git -C "$data" add -A; then
    echo 'Failed to add files to the index'
    exit 100
@


Try to commit the changes, or else.

\marginnote{%
  Quietly store the current contents of the index in a new commit,
  along with a log message describing the changes.%
}

<<config/taskwarrior/on-exit-git.sh>>=
elif ! git -C "$data" commit -qm "$command: ${args#task "$command"}"; then
    echo 'Failed to record changes to the repository'
    exit 101
@


If running in debug mode, print a brief summary of the commit.

<<config/taskwarrior/on-exit-git.sh>>=
elif [ -n "${DEBUG:-}" ]; then
    git -C "$data" log --oneline -1
fi
@
